#!/bin/bash

set -e

THISDIR="$( pwd )"
REPO=$(basename "${THISDIR}")
TINY=zppz/tiny:21.01.02
MINI=$(bash -c "$(docker run --rm ${TINY} cat /usr/tools/find-image)" -- zppz/mini)



function build-dev {
    local name="$1"
    docker build -t ${name} ${DEV_OPTS} ${THISDIR}/docker
}


function build-branch {
    local name="$1"

    # A project image's branched version is built on top of its
    # 'dev' version. The only addition to the parent image is to
    # install the repo's code (typically a Python package) in
    # the image.
    local parent="$2"

    local build_dir="/tmp/${REPO}"
    rm -rf ${build_dir}
    mkdir -p ${build_dir}/src
    [ -d ${THISDIR}/src ] && cp -R ${THISDIR}/src ${build_dir}/src/src
    [ -d ${THISDIR}/bin ] && cp -R ${THISDIR}/bin ${build_dir}/src/bin
    [ -d ${THISDIR}/sysbin ] && cp -R ${THISDIR}/sysbin ${build_dir}/src/sysbin
    [ -d ${THISDIR}/tests ] && cp -R ${THISDIR}/tests ${build_dir}/src/tests
    [ -f ${THISDIR}/setup.py ] && cp ${THISDIR}/setup.py ${build_dir}/src/
    [ -f ${THISDIR}/setup.cfg ] && cp ${THISDIR}/setup.cfg ${build_dir}/src/
    [ -f ${THISDIR}/MANIFEST.in ] && cp ${THISDIR}/MANIFEST.in ${build_dir}/src/
    [ -f ${THISDIR}/install.sh ] && cp ${THISDIR}/install.sh ${build_dir}/src/

    cat > "${build_dir}/Dockerfile" << EOF
FROM ${parent}
USER root

ENV IMAGE_PARENT ${parent}

RUN mkdir -p /tmp/build
COPY src/ /tmp/build
RUN cd /tmp/build \\
    && ( if [ -f install.sh ]; then bash install.sh; elif [ -f setup.py ]; then python -m pip install --no-cache-dir . ; fi) \\
    && mkdir -p /opt/${REPO} \\
    && ( if [ -d bin ]; then mv -f bin "/opt/${REPO}/"; fi ) \\
    && ( if [ -d tests ]; then mv -f tests "/opt/${REPO}/"; fi ) \\
    && ( if [ -d sysbin ]; then mkdir -p /usr/local/bin && mv sysbin/* /usr/local/bin/; fi ) \\
    && cd / \\
    && rm -rf /tmp/build
EOF

    docker build -t ${name} "${build_dir}" || return 1
    rm -rf "${build_dir}"
}


function build-test {
    local parent="$1"  # this is the branch image
    local name="$2"

    local build_dir=/tmp/src
    rm -rf ${build_dir}
    mkdir -p ${build_dir}/src
    cp -R ${THISDIR}/{src,tests} ${build_dir}/src || return 1
    [ -d ${THISDIR}/bin ] && cp -R ${THISDIR}/bin ${build_dir}/src

    cat > "${build_dir}/Dockerfile" <<EOF
FROM ${parent}
USER root
RUN python -m pip install --no-cache-dir bandit mypy pyflakes pylint radon pytest-cov pytest-sugar
COPY src /tmp/src
COPY --from=${MINI} /usr/tools/check-n-test /usr/local/bin
EOF
    docker build -t ${name} ${build_dir} || return 1
    rm -rf ${build_dir}
}


NAME=${REPO}
NAMESPACE=
TAG=
COV_FAIL_UNDER=50  # use 0 to turn off tests
MYPY=no
DEV_OPTS=
PUSH=

while [[ $# > 0 ]]; do
    if [[ "$1" == --name=* ]]; then
        NAME="$1"
        NAME="${NAME#--name=}"
        shift
    elif [[ "$1" == --name ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "missing image name after --name"
            exit 1
        fi
        NAME="$1"
        shift
    elif [[ "$1" == --namespace=* ]]; then
        NAMESPACE="$1"
        NAMESPACE="${NAMESPACE#--namespace=}"
        shift
    elif [[ "$1" == --namespace ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "missing namespace after --namespace"
            exit 1
        fi
        NAMESPACE="$1"
        shift
    elif [[ "$1" == --push ]]; then
        shift
        PUSH=yes
    elif [[ "$1" == --tag=* ]]; then
        TAG="$1"
        TAG="${TAG#--tag=}"
        shift
    elif [[ "$1" == --tag ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "missing image tag after --tag"
            exit 1
        fi
        TAG="$1"
        shift
    elif [[ "$1" == --cov-fail-under=* ]]; then
        COV_FAIL_UNDER="$1"
        COV_FAIL_UNDER="${COV_FAIL_UNDER#--cov-fail-under=}"
        shift
    elif [[ "$1" == --cov-fail-under ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "missing covarage requirement after --cov-fail-under"
            exit 1
        fi
        COV_FAIL_UNDER="$1"
        shift
    elif [[ "$1" == --mypy ]]; then
        MYPY=yes
        shift
    else
        DEV_OPTS="${DEV_OPTS} $1"
        # All unrecognized options are passed on to
        # the `docker build` command for the dev image.
        # These may contain, e.g. `--build-arg ...`.
        shift
    fi
done

if [ -z "${TAG}" ]; then
    TAG=$(docker run --rm ${TINY} make-datetime-version)
fi


start_time=$(date)

echo
echo '############################'
echo "start building dev image"
echo '----------------------------'
echo
if [ "${NAMESPACE}" ]; then
    dev_img_name="${NAMESPACE}/${NAME}:${TAG}"
else
    dev_img_name="${NAME}:${TAG}"
fi
build-dev ${dev_img_name} ${DEV_OPTS} || exit 1
echo


if [ -d "${THISDIR}/.git" ]; then
    BRANCH=$(cat "${THISDIR}/.git/HEAD")
    BRANCH="${BRANCH##*/}"
else
    BRANCH=branch
fi

echo
echo '############################'
echo "start building branch image"
echo '----------------------------'
echo
if [ "${NAMESPACE}" ]; then
    branch_img_name="${NAMESPACE}/${NAME}-${BRANCH}:${TAG}"
else
    branch_img_name="${NAME}-${BRANCH}:${TAG}"
fi
build-branch ${branch_img_name} ${dev_img_name} || exit 1
echo


echo
echo '############################'
echo "start building test image"
echo '----------------------------'
echo
test_img_name=test:latest
build-test ${branch_img_name} ${test_img_name} || exit 1


echo
echo '############################'
echo "run code checks and tests in test image"
echo '----------------------------'
echo

PY_PKG_NAME=$(grep '^name\s*=\s*[a-zA-Z][a-zA-Z0-9_-]*$' "${THISDIR}/setup.cfg")
PY_PKG_NAME=$(echo "${PY_PKG_NAME#*=}" | xargs | tr '-' '_')
# `xargs` removes leading and trailing spaces.

docker run \
    ${test_img_name} \
        check-n-test ${PY_PKG_NAME} $MYPY $COV_FAIL_UNDER || exit 1



if [[ "${PUSH}" == yes ]]; then
    echo
    echo
    echo '#######################'
    echo 'start pushing dev image'
    echo '-----------------------'
    echo
    docker push ${dev_img_name}
    echo
    echo
    echo '##########################'
    echo 'start pushing branch image'
    echo '--------------------------'
    echo
    docker push ${branch_img_name}
fi


end_time=$(date)
echo
echo "Started at ${start_time}"
echo "Finished at ${end_time}"
echo
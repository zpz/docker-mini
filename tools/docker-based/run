#!/bin/bash

# In the root directory of a Python project repo, there is a script called `run`.
# This script prepares a few env vars, then run the current script.
#
# This script is similar to the one in `pip-based`, except for these main differences:
#
# - This script builds a Docker images using the `docker/Dockerfile` in the repo.
# - The Dockerfile does not access anything outside of the `docker/` folder; if the build needs any supporting
#   resources, they should be in that folder as well.
# - The repo's `pyproject.toml` does not specify any dependencies; all dependencies are specified in the `Dockerfile`.

# This script should be run from the root directory of the repo.


set -e


# In the real workflow, `$PARENT` is already defined in the script that calls the current script.
# Here we allow it to be missing so that the current script can be invoked directly
# during development and debugging of this script.
PARENT="${PARENT:-zppz/py3:24.12.16}"

if [[ $(uname -s) == Darwin && $(uname -p) == arm ]]; then
    # On Mac, we do not pull the parent image from a remote registry,
    # but rather require a locally-built one to exist, because
    # the remotely-stored images are for arm64 architecture only.
    if [[ $(docker images -q ${PARENT}) == '' ]]; then
        >&2 echo "Cannot find the parent image '${PARENT}'."
        exit 1
    fi
    if [[ $(docker image inspect -f "{{.Architecture}}" ${PARENT}) != arm64 ]]; then
        >&2 echo "The parent image '${PARENT}' on this machine is not optimized for the CPU architecture."
        exit 1
    fi
fi
echo "Parent image: ${PARENT}"


thisdir="$(cd $( pwd ) && pwd)"  # full path; do not use `${BASH_SOURCE[0]}` b/c this script is not invoked directly.
echo "Work directory: ${thisdir}"


# Infer the project name.
# This is the name of the parent directory, but we infer it from Git config to be more reliable.
proj="$(grep 'url = ' "${thisdir}"/.git/config 2>/dev/null)"  || proj="$(basename $(pwd))" # get the line like '   url = git@github.com:zpz/docker-mini.git'
proj="${proj##*/}"  # remove the longest substr from front of '/', keeping "docker-mini.git"
PROJ="${proj%.git}"  # remove substr from back
if [[ "${PROJ}" == *_* ]]; then
    >&2 "Project name '${PROJ}' contains underscore. Use dash instead."
    exit 1
fi
echo "Project: ${PROJ}"


# Infer the package name.
# This is the name of the package code directory under `src/`, also the "import" name.
# This does not need to be the "project" name defined in `pyproject.toml`, which is for `pypi` and `pip`,
# related to install/uninstall.
rm -rf "${thisdir}/src"/*egg-info  # these could have been created during package build
pkg="$(ls "${thisdir}"/src/)"
if [[ "${pkg}" == '' || $pkg = *' '* ]]; then  # zero or multiple subdirectories
    >&2 echo "unable to infer package name"
    exit 1
fi
PKG=${pkg%/}  # remove '/' at the end


# Infer branch name.
branch=$(cat "${thisdir}/.git/HEAD" 2>/dev/null) || branch=''
GITBRANCH=${branch##*refs/heads/}  # remove the longest substr from front
echo "Branch: ${GITBRANCH}"


DOCKER_SRCDIR=/tmp/src

HOST_IS_MAC="$(if [ $(uname -s) = Darwin ]; then echo 1 ; fi)"
HOST_IS_LINUX="$(if [ $(uname -s) = Linux ]; then echo 1 ; fi)"
HOST_HAS_GPU="$(if [ $(which nvidia-smi) ]; then echo 1 ; fi)"

docker build --no-cache -f "${thisdir}/docker/Dockerfile" \
    --build-arg PARENT="${PARENT}" \
    --build-arg HOST_IS_MAC="${HOST_IS_MAC}" \
    --build-arg HOST_IS_LINUX="${HOST_IS_LINUX}" \
    --build-arg HOST_HAS_GPU="${HOST_HAS_GPU}" \
    -t ${PROJ}:dev \
    "${thisdir}/docker"
echo


if [[ "${GITBRANCH}" == main || "${GITBRANCH}" == master || "${GITBRANCH}" == release ]]; then
    bash "${thisdir}/.githooks/pre-commit"

    docker run --rm \
        -v ${thisdir}:/home/docker-user/tmp/${PROJ} \
        -e PYTHONPATH="/home/docker-user/tmp/${PROJ}/src" \
        --workdir="/home/docker-user/tmp/${PROJ}" \
        ${PROJ}:dev py.test --cov="src/${PKG}" "tests"

    if [[ "${GITBRANCH}" == release ]]; then
        rm -rf "${thisdir}/dist"

        docker rm "${PROJ}-release" &>/dev/null || true
        docker run \
            -v ${thisdir}:/home/docker-user/tmp/${PROJ} \
            --workdir="/home/docker-user/tmp/${PROJ}" \
            --name="${PROJ}"-release \
            ${PROJ}:dev python -m build '.'
        echo "Release artifacts are saved in '${thisdir}/dist'"
        # Successful release will create a `dist/*.tar.gz` and a `dist/*.whl`.
    fi
else
    # Take a free ride to config githooks
    if [ -d "${thisdir}/.git" ]; then
        git config --local core.hooksPath "${thisdir}/.githooks/"
        chmod +x "${thisdir}/.githooks/pre-commit"
    fi

    run-docker ${PROJ}:dev
fi

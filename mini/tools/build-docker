#!/bin/bash


thisfile="${BASH_SOURCE[0]}"
thisdir="$( cd $( dirname ${thisfile} ) && pwd )"


cmd="$(docker run --rm zppz/tiny:21.01.01 cat /find-image)"
parent=$(bash -c "${cmd}" -- zppz/py3)


function build-image {
    local name_="$1"
    local builddir_="$2"
    shift
    shift
    echo
    echo
    echo "=== build image ${name} ==="
    echo "=== $(date) ==="
    echo
    docker build -t ${name} ${builddir_} $@ || return 1
}


function build-dev {
    local name="$1"
    shift
    if [[ $# > 0 ]]; then
        parent="$1"
        cmd="$(docker run --rm zppz/tiny:21.01.01 cat /find-image)"
        parent=$(bash -c "${cmd}" -- ${parent})
        build-image $name "${thisdir}/docker" --build-arg PARENT=${parent}
    else
        build-image $name "${thisdir}/docker"
    fi
}


function build-branch {
    local name="$1"

    # A project image's branched version is built on top of its
    # 'dev' version. The only addition to the parent image is to
    # install the repo's code (typically a Python package) in
    # the image.
    local parent="$2"

    local build_dir="/tmp/${REPO}"
    rm -rf ${build_dir}
    mkdir -p ${build_dir}/src
    [ -d ${thisdir}/src ] && cp -R ${thisdir}/src ${build_dir}/src/src
    [ -d ${thisdir}/bin ] && cp -R ${thisdir}/bin ${build_dir}/src/bin
    [ -d ${thisdir}/sysbin ] && cp -R ${thisdir}/sysbin ${build_dir}/src/sysbin
    [ -d ${thisdir}/tests ] && cp -R ${thisdir}/tests ${build_dir}/src/tests
    [ -f ${thisdir}/setup.py ] && cp ${thisdir}/setup.py ${build_dir}/src/
    [ -f ${thisdir}/setup.cfg ] && cp ${thisdir}/setup.cfg ${build_dir}/src/
    [ -f ${thisdir}/MANIFEST.in ] && cp ${thisdir}/MANIFEST.in ${build_dir}/src/
    [ -f ${thisdir}/install.sh ] && cp ${thisdir}/install.sh ${build_dir}/src/

    if [[ ${LANG} == py ]]; then
        cat > "${build_dir}/Dockerfile" << EOF
FROM ${parent}
USER root

ENV PARENT_IMAGE ${parent}

RUN mkdir -p /tmp/build
COPY src/ /tmp/build
RUN cd /tmp/build \\
    && ( if [ -f install.sh ]; then bash install.sh; elif [ -f setup.py ]; then pip-install . ; fi) \\
    && rm -rf /opt/${REPO} && mkdir -p /opt/${REPO} \\
    && ( if [ -d bin ]; then mv -f bin "/opt/${REPO}/"; fi ) \\
    && ( if [ -d tests ]; then mv -f tests "/opt/${REPO}/"; fi ) \\
    && ( if [ -d sysbin ]; then mkdir -p /opt/bin && mv -f sysbin/* "/opt/bin/"; fi ) \\
    && cd / \\
    && rm -rf /tmp/build
EOF
    elif [[ $LANG == R ]]; then
        cat > "${build_dir}/Dockerfile" << EOF
FROM ${parent}
USER root

ENV PARENT_IMAGE ${parent}

RUN mkdir -p /tmp/build
COPY src/ /tmp/build
RUN cd /tmp/build \\
    && ( if [ -f install.sh ]; then bash install.sh; \\
         else ( \\
             cd src; R CMD build .; \\
             R CMD INSTALL *.tar.gz \\
             ) ; \\
         fi \\
        ) \\
    && rm -rf /opt/${REPO} && mkdir -p /opt/${REPO} \\
    && ( if [ -d bin ]; then mv -f bin "/opt/${REPO}/"; fi ) \\
    && ( if [ -d tests ]; then mv -f tests "/opt/${REPO}/"; fi ) \\
    && ( if [ -d sysbin ]; then mkdir -p /opt/bin && mv -f sysbin/* "/opt/bin/"; fi ) \\
    && cd / \\
    && rm -rf /tmp/build
EOF
    else
        >&2 echo language "${LANG}" is not supported
        return 1
    fi

    build-image ${name} "${build_dir}" || return 1
    rm -rf "${build_dir}"
}


REPO=$(basename "${thisdir}")
NAMESPACE=zppz 

NAME=${REPO}
PARENT=
TIMESTAMP=$(docker run --rm zppz/tiny:21.01.01 make-date-version)
run_tests=yes
verbose_tests=
cov_fail_under=1
test_log_level=info
while [[ $# > 0 ]]; do
    if [[ "$1" == --name=* ]]; then
        NAME="$1"
        NAME="${NAME#--name=}"
        shift
    elif [[ "$1" == --name ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "image name expected following --name"
            exit 1
        fi
        NAME="$1"
        shift
    elif [[ "$1" == --parent=* ]]; then
        PARENT="$1"
        PARENT="${PARENT#--parent=}"
        shift
    elif [[ "$1" == --parent ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "parent name expected following --parent"
            exit 1
        fi
        PARENT="$1"
        shift
    elif [[ "$1" == --timestamp=* ]]; then
        TIMESTAMP="$1"
        TIMESTAMP="${TIMESTAMP#--timestamp=}"
        shift
    elif [[ "$1" == --timestamp ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "timestamp expected following --timestamp"
            exit 1
        fi
        TIMESTAMP="$1"
        shift
    elif [[ "$1" == --no-tests ]]; then
        run_tests=no
        shift
    elif [[ "$1" == --test-log-level=* ]]; then
        test_log_level="$1"
        test_log_level="${test_log_level#--test-log-level=}"
        shift
    elif [[ "$1" == --test-log-level ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "--test-log-level is missing argument"
            exit 1
        fi
        test_log_level="$1"
        shift
    elif [[ "$1" == --cov-fail-under=* ]]; then
        cov_fail_under="$1"
        cov_fail_under="${cov_fail_under#--cov-fail-under=}"
        shift
    elif [[ "$1" == --cov-fail-under ]]; then
        shift
        if [[ $# == 0 ]]; then
            >&2 echo "covarage requirement expected following --cov-fail-under"
            exit 1
        fi
        cov_fail_under="$1"
        shift
    else
        >&2 echo "unknown argument '$@'"
        exit 1
    fi
done


start_time=$(date)

echo
echo '############################'
echo "start building dev image"
echo '----------------------------'
echo
dev_img_name="${NAMESPACE}/${NAME}:${TIMESTAMP}"
build-dev ${dev_img_name} ${PARENT} || exit 1
echo


PUSH=no

if [ -f src/DESCRIPTION ] && [ -d src/R ]; then
    LANG=R
    run_tests=no  # change this once we've figured out how to run R tests.
else
    LANG=py
fi

echo
echo '############################'
echo "start building branch image"
echo '----------------------------'
echo
branch_img_name="${NAMESPACE}/${NAME}-${BRANCH}:${TIMESTAMP}"
build-branch ${branch_img_name} ${dev_img_name} || exit 1
echo


if [[ "${run_tests}" == yes ]]; then
    echo
    echo '###########################'
    echo "run tests in branch image ${branch_img_name}"
    echo '---------------------------'
    echo
    rm -rf /tmp/docker-build-tests
    mkdir -p /tmp/docker-build-tests/{data,log,cfg,tmp,src}
    run_docker \
        --workdir=/tmp \
        ${branch_img_name} \
        py.test -s --log-cli-level info -v --showlocals \
        /opt/${REPO}/tests \
        --cov=/usr/local/lib/python3.8/dist-packages/${REPO//-/_} \
        --cov-fail-under ${cov_fail_under}
    if [[ $? == 0 ]]; then
        rm -rf /tmp/docker-build-tests
        echo
        echo TESTS PASSED
        echo
    else
        rm -rf /tmp/docker-build-tests
        docker rmi -f ${branch_img_name}
        echo
        echo TESTS FAILED
        echo
        exit 1
    fi
fi


if [[ "${PUSH}" == yes ]]; then
    echo
    echo
    echo '#######################'
    echo 'start pushing dev image'
    echo '-----------------------'
    echo
    docker push ${dev_img_name}
    echo
    echo
    echo '##########################'
    echo 'start pushing branch image'
    echo '--------------------------'
    echo
    docker push ${branch_img_name}
fi


end_time=$(date)
echo
echo "Started at ${start_time}"
echo "Finished at ${end_time}"
echo